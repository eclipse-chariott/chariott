syntax = "proto3";

package chariott_registry;

// The Registry service definition.
service Registry {
  // Register
  rpc Register(RegisterRequest) returns (RegisterResponse) {}

  // Unregister
  //rpc Unregister(UnregisterRequest) returns (UnregisterResponse) {}

  // Discover fully qualified
  rpc DiscoverService(DiscoverServiceRequest) returns (DiscoverServiceResponse) {}

  // Inspect (dumps the contents of the registry for now)
  rpc Inspect(InspectRequest) returns (InspectResponse) {}
  
}

// Service definition
message ServiceMetadata {
  string namespace = 1;
  string name = 2;
  string version = 3;
  string uri = 4;
  string communication_kind = 5;
  string communication_reference = 6;
}

// Register status
enum RegistrationStatus {
  NEWLY_REGISTERED = 0; // An entry did not exist in the service registry for this 
  UPDATED = 1; // An entry already existed in the service registry and it has now been updated
  COULD_NOT_REGISTER = 2; // TODO: Should we keep this, or just rely on Status from grpc call? Could fail for many reasons (i.e. policy, authz, system errors)
}

enum UnregisterStatus {
  UNREGISTERED = 0; // unregister was successful
  COULD_NOT_UNREGISTER = 1; // TODO: Should we keep this, or just rely on Status from grpc call? Could fail for many reasons (i.e. not found, policy, authz, system errors)
}

// The request with the service description
message RegisterRequest {
  ServiceMetadata service = 1;
}

// The response with a status code 
message RegisterResponse {
}

// The request with the service description
message UnregisterRequest {
  ServiceMetadata service = 1;
}

// The response with a status code 
message UnregisterResponse {
}

// The request with the service description
message DiscoverServiceRequest {
  string namespace = 1;
  string name = 2;
  string version = 3;
}

// The response with a status code 
message DiscoverServiceResponse {
  ServiceMetadata service = 1;
}

// The request with the service description
message InspectRequest {
}

// The response with a status code 
message InspectResponse {
    repeated ServiceMetadata services = 1;
}
