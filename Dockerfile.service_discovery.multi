# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
# SPDX-License-Identifier: MIT

ARG RUST_VERSION=1.70

FROM --platform=$BUILDPLATFORM docker.io/library/rust:${RUST_VERSION} AS builder

# Dockerfile for building Eclipse Chariott Service Discovery container
#
# This Dockerfile utilizes a two step build process. It builds Chariott
# Service Discovery with statically linked dependencies (using musl)
# for a x86_64 architecture.

# Target architecture to cross-compile
ARG TARGETARCH

# Chariott user id
ARG CHARIOTT_UID=10001

RUN apt update && apt upgrade -y
RUN apt install -y cmake protobuf-compiler

# unprivileged identity to run Chariott Service Discovery as
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${CHARIOTT_UID}" \
    chariott

WORKDIR /sdv

COPY ./ .

# Based on the target architecture, add the appropriate build target and build service.
RUN case ${TARGETARCH} in \
    "amd64") \
        rustup target add x86_64-unknown-linux-musl; \
        cargo build --release --target=x86_64-unknown-linux-musl -p service_discovery; \
        mkdir -p /sdv/release && cp /sdv/target/x86_64-unknown-linux-musl/release/service_discovery /sdv/release/service_discovery; \
        ;; \
    "arm64") \
        apt install -y gcc-aarch64-linux-gnu; \
        rustup target add aarch64-unknown-linux-musl; \
        cargo build --release --target=aarch64-unknown-linux-musl -p service_discovery; \
        mkdir -p /sdv/release && cp /sdv/target/aarch64-unknown-linux-musl/release/service_discovery /sdv/release/service_discovery; \
        ;; \
    *) \
        echo "Unsupported cross-compile architecture"; \
        exit 1; \
    esac

####################################################################################################
## Final image
####################################################################################################
FROM --platform=$TARGETPLATFORM alpine:latest

# Import Chariott user and group from builder.
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

WORKDIR /sdv

# Copy our build
COPY --from=builder /sdv/release/service_discovery /sdv/service_discovery

# Use the unprivileged chariott user during execution.
USER chariott:chariott

CMD ["./service_discovery"]
